// Code generated by go-bindata.
// sources:
// builtin_models/Squeezenet.yml
// DO NOT EDIT!

package caffe2

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _squeezenetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4b\x8f\xdb\x36\x10\xbe\xeb\x57\x0c\x60\x04\x68\x01\xaf\xe4\x7d\x07\x3a\x14\x48\xf7\x94\x8b\x0f\xe9\xb1\x08\x8c\x31\x35\xb2\xd8\xf0\x15\x72\xb8\xf6\xe6\xd7\x17\x43\x49\x96\xb7\xd9\x66\x7d\x30\x44\xce\x37\xaf\x8f\x1f\x87\x0e\x2d\xb5\xf0\xd7\xf7\x4c\xf4\x83\xb6\xc4\xb0\x02\xd9\x02\xdf\xc3\x8b\xcf\x11\xac\xef\xc8\x54\x7d\x44\x4b\x47\x1f\xbf\xb5\x15\xc0\xe8\xf2\x84\x7d\x4f\x37\xb0\x82\xb3\x0d\x7a\x1f\x81\x07\x9a\x7c\x00\x9e\x29\x26\xed\x5d\x0b\xd7\xf5\xe6\x15\x70\x32\x80\xf2\x8e\x23\x6a\xc7\xd5\x7f\xa0\x33\x40\xbb\xde\x47\x8b\x3c\x7e\x43\x22\x8b\x8e\xb5\x3a\xdb\x47\x6b\x25\x71\x50\x3b\x8a\x2d\xac\xe0\xbc\x48\x90\x13\x75\xc0\x1e\x02\x45\x41\x8e\x85\x41\x88\xd4\x69\x25\x31\x2b\x58\x7e\x2b\xb0\xd9\xb0\x0e\x86\x20\x18\x64\xc1\x27\x50\xe8\x60\x4f\x90\x02\x29\xdd\x6b\xea\x2a\x00\xb4\xdd\xc3\x5d\x5b\x3c\x0f\x21\xb7\x10\x51\x87\xe8\xff\x21\xc5\x8d\xc2\x68\xcd\x95\x2a\xc4\xb4\x05\x77\xa5\x42\x2e\x50\xf5\x3e\xf4\x50\xa0\x21\xa8\x87\x3b\x43\xed\xfb\x5e\x13\x72\xf2\x7b\xa7\x9a\x4b\x70\x47\x49\x45\x1d\xb8\xf0\xfd\x47\x05\xf3\xe9\x3b\x62\x40\x35\x68\x7a\xa6\x04\x49\x5b\x6d\x30\x42\xa4\x94\x0d\x27\x61\xf1\x93\xa1\xd3\x96\x78\x0d\xc8\x70\xbf\x39\x41\x4f\x47\x8a\x10\x50\x8e\x95\x85\x6e\x74\x1d\x5c\x37\xf7\x9b\x0d\x0f\x45\x07\x49\xff\xa0\x5a\xe2\x5b\x34\x66\x24\x3f\x01\x46\x11\x48\x24\xe8\x09\x93\xde\x1b\x92\xd0\x1d\x05\xe3\x5f\xc0\x3b\x18\x30\x76\x47\xc1\x1c\x35\x0f\x60\xb4\xd5\x4c\x1d\x58\xb2\x3e\xbe\xac\x21\xd2\xf7\xac\x23\x81\xa1\x94\x2a\x00\xe5\xad\xcd\x4e\xab\x51\x20\x5d\x8e\xda\x1d\xa0\xd3\x89\xa3\xde\x67\xf1\x2b\xea\xd2\xee\xb0\x2e\xb5\x49\x58\x49\x4a\xb1\xe4\x3c\xe3\x64\xa5\x8c\x26\xc7\xa9\x5e\xe8\xd8\x5e\xd2\x71\xff\x58\xdf\x7f\x28\x41\x3e\x6e\xea\xdb\x0f\xc0\x3e\x5c\x5d\x97\xb5\x7c\xdd\x03\xaa\x1c\x51\x71\x69\xe1\xb3\xc5\x83\x78\xd7\x55\xa4\x9e\x22\x39\x45\x49\x84\xb9\xac\x8a\x26\x31\x08\x67\x0d\x1c\x69\x9f\x34\x93\x7c\x12\xab\xba\x86\xf1\x7c\xf6\xd2\xcb\xe5\x6d\xba\x82\x81\x39\xa4\xb6\x69\x30\x9e\xf4\x73\xed\xe3\xa1\x09\x5d\xdf\x5c\x3f\x6c\x6e\xea\xcd\xe3\xed\xc3\xe6\xf9\xae\x0e\x5d\xff\x0a\x7a\xd0\x3c\xe4\x7d\xad\xbc\x6d\x46\x25\x34\xe3\x31\x34\x1c\x89\x1a\x8b\x89\x29\x36\xe9\x7c\xfe\xd5\x0a\x8c\x56\xe4\x52\x19\x00\x4b\xf6\x69\xb3\x85\x3f\x3f\x7d\xfe\x52\xad\x40\xbb\x90\x47\x51\x2c\x98\x71\x4f\x84\xbb\x82\x5e\xc7\xc4\x23\x0a\xf8\x25\xd0\x4f\xa3\xe1\xaa\x6c\xb7\xa0\x85\xab\x6a\xbc\x7f\x17\xba\x9c\xb3\x5f\xc4\x29\xa0\x57\xd2\x15\xc0\x98\x62\x89\xb2\xa8\x51\x18\x2f\xa9\x97\xad\xe9\xba\x77\xda\x92\x93\xf1\x91\x5a\xf8\xfb\x7a\x0d\xb7\x6b\xb8\xb9\x79\x2c\x7f\x5f\x27\x88\x25\x74\x62\xbc\xf9\xb8\x86\xf9\xef\x6b\xe5\x33\x87\xcc\x63\x87\x92\xbc\x84\x9f\x2a\x1d\x6d\x15\x4c\x7d\xf5\x84\x9c\x23\x15\x28\xbe\xd5\xd9\x88\x5f\x8a\xab\xde\x68\x6e\xc2\x18\xdc\x17\xce\x2e\x7a\x9b\x18\x7b\xab\xbf\x29\x73\xda\xe5\x68\xda\xa2\x83\xb6\x69\x3a\x64\xac\x3b\x6b\x54\x6d\x4d\x63\x4f\x8e\x78\xd6\x41\xa1\x4e\xd6\xe9\xc5\x25\xe2\x9a\x4f\x5c\x15\x93\xf0\x37\xcf\xbd\x34\x4d\xce\x43\xc4\x30\x14\xd5\x1f\x49\x1f\x06\x4e\x32\x1e\x7c\x8e\x8a\x24\xf7\x1e\x13\x2d\x59\x7f\xa9\xbe\x88\xc7\x37\xc4\x07\x63\x82\x5d\x40\x1e\xda\x79\x4c\xef\x1c\x71\x1d\xf6\x15\xcc\x39\x27\x33\x9d\x48\x2d\x36\x9d\x76\x18\xd5\xa0\x9f\x85\x7b\x34\x89\x60\x05\xba\x87\x24\xe3\x8a\x07\x72\x85\xcf\xb9\x40\xd0\x09\x10\xe4\x83\x3d\xa0\x83\xc9\xf3\xf2\x35\xb8\x78\x16\xc4\x73\xa9\xeb\xb2\xfb\x71\xa3\x84\xef\xc8\x79\x19\x24\xc3\xff\x45\xe9\xb5\xa1\xf2\x72\xa6\x59\x01\x3f\x93\x29\x23\x4f\x8f\xa5\xce\x25\x21\x4f\x33\xaa\xe8\x99\x4e\x1c\x11\x1c\x71\x79\x45\x17\x5b\x05\xf0\x4d\xbb\xae\x85\xa7\xed\x76\xaa\x58\xd6\x92\xc9\x51\x8e\x68\xce\x3e\xbf\x3d\x6d\xb7\x6b\xf8\x22\x7f\x75\x5d\xff\x2e\x7a\x9d\x46\xe4\x4e\x34\x92\x88\xdb\xf3\xfc\x92\x2b\x39\xee\x9d\x1f\xd2\x72\x8d\x27\x87\x0a\xc0\xa2\xd3\x3d\x25\xde\x61\xe6\xc1\xc7\x16\x70\xdf\x65\xd3\x55\xff\x06\x00\x00\xff\xff\x55\x0b\x50\xbd\x55\x08\x00\x00"

func squeezenetYmlBytes() ([]byte, error) {
	return bindataRead(
		_squeezenetYml,
		"Squeezenet.yml",
	)
}

func squeezenetYml() (*asset, error) {
	bytes, err := squeezenetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Squeezenet.yml", size: 2133, mode: os.FileMode(420), modTime: time.Unix(1502315864, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Squeezenet.yml": squeezenetYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Squeezenet.yml": &bintree{squeezenetYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

