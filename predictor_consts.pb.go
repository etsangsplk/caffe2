// Code generated by protoc-gen-gogo.
// source: predictor_consts.proto
// DO NOT EDIT!

package caffe2

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// PredictorConsts ...
type PredictorConsts struct {
	// Important - to ensure ordered traversal of the DB, these must be
	// set in the given (lexicographic) order in the input DBReader.
	META_NET_DEF       *string `protobuf:"bytes,1,opt,name=META_NET_DEF,json=METANETDEF,def=!!META_NET_DEF" json:"META_NET_DEF,omitempty"`
	PREDICTOR_DBREADER *string `protobuf:"bytes,2,opt,name=PREDICTOR_DBREADER,json=PREDICTORDBREADER,def=!!PREDICTOR_DBREADER" json:"PREDICTOR_DBREADER,omitempty"`
	// Blob types used in MetaNetDef blobs
	PARAMETERS_BLOB_TYPE *string `protobuf:"bytes,3,opt,name=PARAMETERS_BLOB_TYPE,json=PARAMETERSBLOBTYPE,def=PARAMETERS_BLOB_TYPE" json:"PARAMETERS_BLOB_TYPE,omitempty"`
	INPUTS_BLOB_TYPE     *string `protobuf:"bytes,4,opt,name=INPUTS_BLOB_TYPE,json=INPUTSBLOBTYPE,def=INPUTS_BLOB_TYPE" json:"INPUTS_BLOB_TYPE,omitempty"`
	OUTPUTS_BLOB_TYPE    *string `protobuf:"bytes,5,opt,name=OUTPUTS_BLOB_TYPE,json=OUTPUTSBLOBTYPE,def=OUTPUTS_BLOB_TYPE" json:"OUTPUTS_BLOB_TYPE,omitempty"`
	// Net types used in MetaNetDef nets
	GLOBAL_INIT_NET_TYPE  *string `protobuf:"bytes,6,opt,name=GLOBAL_INIT_NET_TYPE,json=GLOBALINITNETTYPE,def=GLOBAL_INIT_NET_TYPE" json:"GLOBAL_INIT_NET_TYPE,omitempty"`
	PREDICT_INIT_NET_TYPE *string `protobuf:"bytes,7,opt,name=PREDICT_INIT_NET_TYPE,json=PREDICTINITNETTYPE,def=PREDICT_INIT_NET_TYPE" json:"PREDICT_INIT_NET_TYPE,omitempty"`
	PREDICT_NET_TYPE      *string `protobuf:"bytes,8,opt,name=PREDICT_NET_TYPE,json=PREDICTNETTYPE,def=PREDICT_NET_TYPE" json:"PREDICT_NET_TYPE,omitempty"`
	SINGLE_PREDICTOR      *string `protobuf:"bytes,9,opt,name=SINGLE_PREDICTOR,json=SINGLEPREDICTOR,def=SINGLE_PREDICTOR" json:"SINGLE_PREDICTOR,omitempty"`
	MULTI_PREDICTOR       *string `protobuf:"bytes,10,opt,name=MULTI_PREDICTOR,json=MULTIPREDICTOR,def=MULTI_PREDICTOR" json:"MULTI_PREDICTOR,omitempty"`
	TRAIN_INIT_PLAN_TYPE  *string `protobuf:"bytes,11,opt,name=TRAIN_INIT_PLAN_TYPE,json=TRAININITPLANTYPE,def=TRAIN_INIT_PLAN_TYPE" json:"TRAIN_INIT_PLAN_TYPE,omitempty"`
	TRAIN_PLAN_TYPE       *string `protobuf:"bytes,12,opt,name=TRAIN_PLAN_TYPE,json=TRAINPLANTYPE,def=TRAIN_PLAN_TYPE" json:"TRAIN_PLAN_TYPE,omitempty"`
}

// Reset ...
func (m *PredictorConsts) Reset()                    { *m = PredictorConsts{} }            
// String ...
func (m *PredictorConsts) String() string            { return proto.CompactTextString(m) } 
// ProtoMessage ...
func (*PredictorConsts) ProtoMessage()               {}                                    
// Descriptor ...
func (*PredictorConsts) Descriptor() ([]byte, []int) { return fileDescriptorPredictorConsts, []int{0} }

// Default_PredictorConsts_META_NET_DEF ...
const Default_PredictorConsts_META_NET_DEF string = "!!META_NET_DEF"                 
// Default_PredictorConsts_PREDICTOR_DBREADER ...
const Default_PredictorConsts_PREDICTOR_DBREADER string = "!!PREDICTOR_DBREADER"     
// Default_PredictorConsts_PARAMETERS_BLOB_TYPE ...
const Default_PredictorConsts_PARAMETERS_BLOB_TYPE string = "PARAMETERS_BLOB_TYPE"   
// Default_PredictorConsts_INPUTS_BLOB_TYPE ...
const Default_PredictorConsts_INPUTS_BLOB_TYPE string = "INPUTS_BLOB_TYPE"           
// Default_PredictorConsts_OUTPUTS_BLOB_TYPE ...
const Default_PredictorConsts_OUTPUTS_BLOB_TYPE string = "OUTPUTS_BLOB_TYPE"         
// Default_PredictorConsts_GLOBAL_INIT_NET_TYPE ...
const Default_PredictorConsts_GLOBAL_INIT_NET_TYPE string = "GLOBAL_INIT_NET_TYPE"   
// Default_PredictorConsts_PREDICT_INIT_NET_TYPE ...
const Default_PredictorConsts_PREDICT_INIT_NET_TYPE string = "PREDICT_INIT_NET_TYPE" 
// Default_PredictorConsts_PREDICT_NET_TYPE ...
const Default_PredictorConsts_PREDICT_NET_TYPE string = "PREDICT_NET_TYPE"           
// Default_PredictorConsts_SINGLE_PREDICTOR ...
const Default_PredictorConsts_SINGLE_PREDICTOR string = "SINGLE_PREDICTOR"           
// Default_PredictorConsts_MULTI_PREDICTOR ...
const Default_PredictorConsts_MULTI_PREDICTOR string = "MULTI_PREDICTOR"             
// Default_PredictorConsts_TRAIN_INIT_PLAN_TYPE ...
const Default_PredictorConsts_TRAIN_INIT_PLAN_TYPE string = "TRAIN_INIT_PLAN_TYPE"   
// Default_PredictorConsts_TRAIN_PLAN_TYPE ...
const Default_PredictorConsts_TRAIN_PLAN_TYPE string = "TRAIN_PLAN_TYPE"

// GetMETA_NET_DEF ...
func (m *PredictorConsts) GetMETA_NET_DEF() string {
	if m != nil && m.META_NET_DEF != nil {
		return *m.META_NET_DEF
	}
	return Default_PredictorConsts_META_NET_DEF
}

// GetPREDICTOR_DBREADER ...
func (m *PredictorConsts) GetPREDICTOR_DBREADER() string {
	if m != nil && m.PREDICTOR_DBREADER != nil {
		return *m.PREDICTOR_DBREADER
	}
	return Default_PredictorConsts_PREDICTOR_DBREADER
}

// GetPARAMETERS_BLOB_TYPE ...
func (m *PredictorConsts) GetPARAMETERS_BLOB_TYPE() string {
	if m != nil && m.PARAMETERS_BLOB_TYPE != nil {
		return *m.PARAMETERS_BLOB_TYPE
	}
	return Default_PredictorConsts_PARAMETERS_BLOB_TYPE
}

// GetINPUTS_BLOB_TYPE ...
func (m *PredictorConsts) GetINPUTS_BLOB_TYPE() string {
	if m != nil && m.INPUTS_BLOB_TYPE != nil {
		return *m.INPUTS_BLOB_TYPE
	}
	return Default_PredictorConsts_INPUTS_BLOB_TYPE
}

// GetOUTPUTS_BLOB_TYPE ...
func (m *PredictorConsts) GetOUTPUTS_BLOB_TYPE() string {
	if m != nil && m.OUTPUTS_BLOB_TYPE != nil {
		return *m.OUTPUTS_BLOB_TYPE
	}
	return Default_PredictorConsts_OUTPUTS_BLOB_TYPE
}

// GetGLOBAL_INIT_NET_TYPE ...
func (m *PredictorConsts) GetGLOBAL_INIT_NET_TYPE() string {
	if m != nil && m.GLOBAL_INIT_NET_TYPE != nil {
		return *m.GLOBAL_INIT_NET_TYPE
	}
	return Default_PredictorConsts_GLOBAL_INIT_NET_TYPE
}

// GetPREDICT_INIT_NET_TYPE ...
func (m *PredictorConsts) GetPREDICT_INIT_NET_TYPE() string {
	if m != nil && m.PREDICT_INIT_NET_TYPE != nil {
		return *m.PREDICT_INIT_NET_TYPE
	}
	return Default_PredictorConsts_PREDICT_INIT_NET_TYPE
}

// GetPREDICT_NET_TYPE ...
func (m *PredictorConsts) GetPREDICT_NET_TYPE() string {
	if m != nil && m.PREDICT_NET_TYPE != nil {
		return *m.PREDICT_NET_TYPE
	}
	return Default_PredictorConsts_PREDICT_NET_TYPE
}

// GetSINGLE_PREDICTOR ...
func (m *PredictorConsts) GetSINGLE_PREDICTOR() string {
	if m != nil && m.SINGLE_PREDICTOR != nil {
		return *m.SINGLE_PREDICTOR
	}
	return Default_PredictorConsts_SINGLE_PREDICTOR
}

// GetMULTI_PREDICTOR ...
func (m *PredictorConsts) GetMULTI_PREDICTOR() string {
	if m != nil && m.MULTI_PREDICTOR != nil {
		return *m.MULTI_PREDICTOR
	}
	return Default_PredictorConsts_MULTI_PREDICTOR
}

// GetTRAIN_INIT_PLAN_TYPE ...
func (m *PredictorConsts) GetTRAIN_INIT_PLAN_TYPE() string {
	if m != nil && m.TRAIN_INIT_PLAN_TYPE != nil {
		return *m.TRAIN_INIT_PLAN_TYPE
	}
	return Default_PredictorConsts_TRAIN_INIT_PLAN_TYPE
}

// GetTRAIN_PLAN_TYPE ...
func (m *PredictorConsts) GetTRAIN_PLAN_TYPE() string {
	if m != nil && m.TRAIN_PLAN_TYPE != nil {
		return *m.TRAIN_PLAN_TYPE
	}
	return Default_PredictorConsts_TRAIN_PLAN_TYPE
}

func init() {
	proto.RegisterType((*PredictorConsts)(nil), "caffe2.PredictorConsts")
} 
// Marshal ...
func (m *PredictorConsts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

// MarshalTo ...
func (m *PredictorConsts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.META_NET_DEF != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictorConsts(dAtA, i, uint64(len(*m.META_NET_DEF)))
		i += copy(dAtA[i:], *m.META_NET_DEF)
	}
	if m.PREDICTOR_DBREADER != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPredictorConsts(dAtA, i, uint64(len(*m.PREDICTOR_DBREADER)))
		i += copy(dAtA[i:], *m.PREDICTOR_DBREADER)
	}
	if m.PARAMETERS_BLOB_TYPE != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPredictorConsts(dAtA, i, uint64(len(*m.PARAMETERS_BLOB_TYPE)))
		i += copy(dAtA[i:], *m.PARAMETERS_BLOB_TYPE)
	}
	if m.INPUTS_BLOB_TYPE != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPredictorConsts(dAtA, i, uint64(len(*m.INPUTS_BLOB_TYPE)))
		i += copy(dAtA[i:], *m.INPUTS_BLOB_TYPE)
	}
	if m.OUTPUTS_BLOB_TYPE != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPredictorConsts(dAtA, i, uint64(len(*m.OUTPUTS_BLOB_TYPE)))
		i += copy(dAtA[i:], *m.OUTPUTS_BLOB_TYPE)
	}
	if m.GLOBAL_INIT_NET_TYPE != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPredictorConsts(dAtA, i, uint64(len(*m.GLOBAL_INIT_NET_TYPE)))
		i += copy(dAtA[i:], *m.GLOBAL_INIT_NET_TYPE)
	}
	if m.PREDICT_INIT_NET_TYPE != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPredictorConsts(dAtA, i, uint64(len(*m.PREDICT_INIT_NET_TYPE)))
		i += copy(dAtA[i:], *m.PREDICT_INIT_NET_TYPE)
	}
	if m.PREDICT_NET_TYPE != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPredictorConsts(dAtA, i, uint64(len(*m.PREDICT_NET_TYPE)))
		i += copy(dAtA[i:], *m.PREDICT_NET_TYPE)
	}
	if m.SINGLE_PREDICTOR != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPredictorConsts(dAtA, i, uint64(len(*m.SINGLE_PREDICTOR)))
		i += copy(dAtA[i:], *m.SINGLE_PREDICTOR)
	}
	if m.MULTI_PREDICTOR != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPredictorConsts(dAtA, i, uint64(len(*m.MULTI_PREDICTOR)))
		i += copy(dAtA[i:], *m.MULTI_PREDICTOR)
	}
	if m.TRAIN_INIT_PLAN_TYPE != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPredictorConsts(dAtA, i, uint64(len(*m.TRAIN_INIT_PLAN_TYPE)))
		i += copy(dAtA[i:], *m.TRAIN_INIT_PLAN_TYPE)
	}
	if m.TRAIN_PLAN_TYPE != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintPredictorConsts(dAtA, i, uint64(len(*m.TRAIN_PLAN_TYPE)))
		i += copy(dAtA[i:], *m.TRAIN_PLAN_TYPE)
	}
	return i, nil
}

func encodeFixed64PredictorConsts(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32PredictorConsts(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPredictorConsts(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
} 
// Size ...
func (m *PredictorConsts) Size() (n int) {
	var l int
	_ = l
	if m.META_NET_DEF != nil {
		l = len(*m.META_NET_DEF)
		n += 1 + l + sovPredictorConsts(uint64(l))
	}
	if m.PREDICTOR_DBREADER != nil {
		l = len(*m.PREDICTOR_DBREADER)
		n += 1 + l + sovPredictorConsts(uint64(l))
	}
	if m.PARAMETERS_BLOB_TYPE != nil {
		l = len(*m.PARAMETERS_BLOB_TYPE)
		n += 1 + l + sovPredictorConsts(uint64(l))
	}
	if m.INPUTS_BLOB_TYPE != nil {
		l = len(*m.INPUTS_BLOB_TYPE)
		n += 1 + l + sovPredictorConsts(uint64(l))
	}
	if m.OUTPUTS_BLOB_TYPE != nil {
		l = len(*m.OUTPUTS_BLOB_TYPE)
		n += 1 + l + sovPredictorConsts(uint64(l))
	}
	if m.GLOBAL_INIT_NET_TYPE != nil {
		l = len(*m.GLOBAL_INIT_NET_TYPE)
		n += 1 + l + sovPredictorConsts(uint64(l))
	}
	if m.PREDICT_INIT_NET_TYPE != nil {
		l = len(*m.PREDICT_INIT_NET_TYPE)
		n += 1 + l + sovPredictorConsts(uint64(l))
	}
	if m.PREDICT_NET_TYPE != nil {
		l = len(*m.PREDICT_NET_TYPE)
		n += 1 + l + sovPredictorConsts(uint64(l))
	}
	if m.SINGLE_PREDICTOR != nil {
		l = len(*m.SINGLE_PREDICTOR)
		n += 1 + l + sovPredictorConsts(uint64(l))
	}
	if m.MULTI_PREDICTOR != nil {
		l = len(*m.MULTI_PREDICTOR)
		n += 1 + l + sovPredictorConsts(uint64(l))
	}
	if m.TRAIN_INIT_PLAN_TYPE != nil {
		l = len(*m.TRAIN_INIT_PLAN_TYPE)
		n += 1 + l + sovPredictorConsts(uint64(l))
	}
	if m.TRAIN_PLAN_TYPE != nil {
		l = len(*m.TRAIN_PLAN_TYPE)
		n += 1 + l + sovPredictorConsts(uint64(l))
	}
	return n
}

func sovPredictorConsts(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPredictorConsts(x uint64) (n int) {
	return sovPredictorConsts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
} 
// Unmarshal ...
func (m *PredictorConsts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictorConsts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredictorConsts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredictorConsts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field META_NET_DEF", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictorConsts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictorConsts
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.META_NET_DEF = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PREDICTOR_DBREADER", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictorConsts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictorConsts
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PREDICTOR_DBREADER = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PARAMETERS_BLOB_TYPE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictorConsts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictorConsts
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PARAMETERS_BLOB_TYPE = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field INPUTS_BLOB_TYPE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictorConsts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictorConsts
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.INPUTS_BLOB_TYPE = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OUTPUTS_BLOB_TYPE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictorConsts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictorConsts
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OUTPUTS_BLOB_TYPE = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLOBAL_INIT_NET_TYPE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictorConsts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictorConsts
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GLOBAL_INIT_NET_TYPE = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PREDICT_INIT_NET_TYPE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictorConsts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictorConsts
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PREDICT_INIT_NET_TYPE = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PREDICT_NET_TYPE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictorConsts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictorConsts
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PREDICT_NET_TYPE = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SINGLE_PREDICTOR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictorConsts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictorConsts
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SINGLE_PREDICTOR = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MULTI_PREDICTOR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictorConsts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictorConsts
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MULTI_PREDICTOR = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TRAIN_INIT_PLAN_TYPE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictorConsts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictorConsts
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TRAIN_INIT_PLAN_TYPE = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TRAIN_PLAN_TYPE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictorConsts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictorConsts
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TRAIN_PLAN_TYPE = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictorConsts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictorConsts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPredictorConsts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPredictorConsts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPredictorConsts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPredictorConsts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPredictorConsts
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPredictorConsts
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPredictorConsts(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

// ErrInvalidLengthPredictorConsts ...
var (
	ErrInvalidLengthPredictorConsts = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPredictorConsts   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("predictor_consts.proto", fileDescriptorPredictorConsts) }

var fileDescriptorPredictorConsts = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcb, 0x4e, 0x83, 0x40,
	0x14, 0x86, 0xc5, 0x4b, 0xb5, 0xc7, 0xca, 0x65, 0x82, 0x86, 0x15, 0x11, 0x57, 0xae, 0x8c, 0x71,
	0xa3, 0xa9, 0x71, 0x01, 0x65, 0x5a, 0x49, 0xe8, 0x40, 0x4e, 0xa7, 0x0b, 0x57, 0x13, 0x53, 0xdb,
	0xc4, 0x8d, 0x34, 0x6d, 0xdf, 0x43, 0x1f, 0xcb, 0xa5, 0x8f, 0x60, 0xea, 0x8b, 0x18, 0x66, 0x0a,
	0x25, 0x94, 0x25, 0xdf, 0x7f, 0xbe, 0x3f, 0x87, 0x33, 0x70, 0x31, 0x5f, 0x4c, 0xdf, 0xde, 0x27,
	0xab, 0x6c, 0x21, 0x26, 0xd9, 0xc7, 0x72, 0xb5, 0xbc, 0x99, 0x2f, 0xb2, 0x55, 0x46, 0x5a, 0x93,
	0xd7, 0xd9, 0x6c, 0x7a, 0x77, 0xf5, 0xd9, 0x02, 0x23, 0x2d, 0x46, 0x7a, 0x72, 0x82, 0xdc, 0x42,
	0x67, 0x48, 0xb9, 0x2f, 0x18, 0xe5, 0x22, 0xa4, 0x7d, 0x47, 0xbb, 0xd4, 0xae, 0xdb, 0x5d, 0xdd,
	0xf3, 0xaa, 0x14, 0x21, 0xff, 0x62, 0x94, 0x87, 0xb4, 0x4f, 0x7a, 0x40, 0x52, 0xa4, 0x61, 0xd4,
	0xe3, 0x09, 0x8a, 0x30, 0x40, 0xea, 0x87, 0x14, 0x9d, 0x7d, 0xe9, 0xd9, 0x9e, 0xb7, 0x9b, 0xa1,
	0x55, 0xb2, 0x02, 0x91, 0x3e, 0xd8, 0xa9, 0x8f, 0xfe, 0x90, 0x72, 0x8a, 0x23, 0x11, 0xc4, 0x49,
	0x20, 0xf8, 0x4b, 0x4a, 0x9d, 0x03, 0x55, 0xd3, 0x94, 0x21, 0xd9, 0xd2, 0x1c, 0xe6, 0x8c, 0x74,
	0xc1, 0x8c, 0x58, 0x3a, 0xe6, 0xd5, 0x8e, 0x43, 0xd9, 0xb1, 0xc3, 0x51, 0x57, 0xa4, 0x74, 0x9f,
	0xc0, 0x4a, 0xc6, 0xbc, 0x26, 0x1f, 0x49, 0x79, 0x37, 0x40, 0x63, 0x83, 0x4a, 0x9d, 0x82, 0x3d,
	0x88, 0x93, 0xc0, 0x8f, 0x45, 0xc4, 0x22, 0x2e, 0x4f, 0x25, 0x1b, 0x5a, 0xea, 0x17, 0x9a, 0x32,
	0xb4, 0x14, 0xcd, 0x21, 0xa3, 0x5c, 0xd6, 0x3c, 0xc3, 0xf9, 0xe6, 0x3c, 0xb5, 0x9e, 0x63, 0xd9,
	0xd3, 0x1c, 0x62, 0xf1, 0x04, 0xd5, 0xa6, 0x2e, 0x98, 0xc5, 0x70, 0x59, 0x72, 0xa2, 0x6e, 0x51,
	0xe7, 0xa8, 0x6f, 0x48, 0xe1, 0x3e, 0x82, 0x39, 0x8a, 0xd8, 0x20, 0xa6, 0xa2, 0x7c, 0x2b, 0xa7,
	0xad, 0xdc, 0x3a, 0x47, 0x43, 0x91, 0x12, 0x90, 0x07, 0x30, 0x86, 0xe3, 0x98, 0x47, 0x15, 0x17,
	0xa4, 0x5b, 0xc7, 0xa8, 0x4b, 0xb0, 0x35, 0x29, 0xd8, 0x1c, 0xfd, 0x88, 0xa9, 0xbf, 0x4b, 0x63,
	0x9f, 0xa9, 0xb5, 0x4f, 0xd5, 0x0d, 0x9b, 0x32, 0xb4, 0x24, 0xcd, 0x61, 0xce, 0xe4, 0xf6, 0xf7,
	0x60, 0xa8, 0xd1, 0x6d, 0x43, 0x47, 0x2d, 0x50, 0xc3, 0x78, 0x26, 0x41, 0x21, 0x06, 0xe6, 0xf7,
	0xda, 0xd5, 0x7e, 0xd6, 0xae, 0xf6, 0xbb, 0x76, 0xb5, 0xaf, 0x3f, 0x77, 0xef, 0x3f, 0x00, 0x00,
	0xff, 0xff, 0x91, 0xab, 0x1e, 0x36, 0x44, 0x03, 0x00, 0x00,
}
