// Code generated by protoc-gen-gogo.
// source: metanet.proto
// DO NOT EDIT!

package caffe2

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ModelInfo struct {
	Project       string  `protobuf:"bytes,1,opt,name=project" json:"project"`
	ModelClass    string  `protobuf:"bytes,2,opt,name=modelClass" json:"modelClass"`
	Version       string  `protobuf:"bytes,3,opt,name=version" json:"version"`
	PredictorType *string `protobuf:"bytes,4,opt,name=predictorType,def=SINGLE_PREDICTOR" json:"predictorType,omitempty"`
	ModelId       string  `protobuf:"bytes,5,opt,name=modelId" json:"modelId"`
}

func (m *ModelInfo) Reset()                    { *m = ModelInfo{} }
func (m *ModelInfo) String() string            { return proto.CompactTextString(m) }
func (*ModelInfo) ProtoMessage()               {}
func (*ModelInfo) Descriptor() ([]byte, []int) { return fileDescriptorMetanet, []int{0} }

const Default_ModelInfo_PredictorType string = "SINGLE_PREDICTOR"

func (m *ModelInfo) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ModelInfo) GetModelClass() string {
	if m != nil {
		return m.ModelClass
	}
	return ""
}

func (m *ModelInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ModelInfo) GetPredictorType() string {
	if m != nil && m.PredictorType != nil {
		return *m.PredictorType
	}
	return Default_ModelInfo_PredictorType
}

func (m *ModelInfo) GetModelId() string {
	if m != nil {
		return m.ModelId
	}
	return ""
}

type BlobsMap struct {
	Key   string   `protobuf:"bytes,1,req,name=key" json:"key"`
	Value []string `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
}

func (m *BlobsMap) Reset()                    { *m = BlobsMap{} }
func (m *BlobsMap) String() string            { return proto.CompactTextString(m) }
func (*BlobsMap) ProtoMessage()               {}
func (*BlobsMap) Descriptor() ([]byte, []int) { return fileDescriptorMetanet, []int{1} }

func (m *BlobsMap) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *BlobsMap) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type NetsMap struct {
	Key   string  `protobuf:"bytes,1,req,name=key" json:"key"`
	Value *NetDef `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (m *NetsMap) Reset()                    { *m = NetsMap{} }
func (m *NetsMap) String() string            { return proto.CompactTextString(m) }
func (*NetsMap) ProtoMessage()               {}
func (*NetsMap) Descriptor() ([]byte, []int) { return fileDescriptorMetanet, []int{2} }

func (m *NetsMap) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *NetsMap) GetValue() *NetDef {
	if m != nil {
		return m.Value
	}
	return nil
}

type PlansMap struct {
	Key   string   `protobuf:"bytes,1,req,name=key" json:"key"`
	Value *PlanDef `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (m *PlansMap) Reset()                    { *m = PlansMap{} }
func (m *PlansMap) String() string            { return proto.CompactTextString(m) }
func (*PlansMap) ProtoMessage()               {}
func (*PlansMap) Descriptor() ([]byte, []int) { return fileDescriptorMetanet, []int{3} }

func (m *PlansMap) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PlansMap) GetValue() *PlanDef {
	if m != nil {
		return m.Value
	}
	return nil
}

type StringMap struct {
	Key   string `protobuf:"bytes,1,req,name=key" json:"key"`
	Value string `protobuf:"bytes,2,req,name=value" json:"value"`
}

func (m *StringMap) Reset()                    { *m = StringMap{} }
func (m *StringMap) String() string            { return proto.CompactTextString(m) }
func (*StringMap) ProtoMessage()               {}
func (*StringMap) Descriptor() ([]byte, []int) { return fileDescriptorMetanet, []int{4} }

func (m *StringMap) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StringMap) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MetaNetDef struct {
	Blobs []*BlobsMap `protobuf:"bytes,1,rep,name=blobs" json:"blobs,omitempty"`
	// Text-format serialized NetDefs.
	Nets []*NetsMap `protobuf:"bytes,2,rep,name=nets" json:"nets,omitempty"`
	// Info about where the model comes from. Possible use cases:
	// 1) sanity check or diagnose
	// 2) provide info for evaluation.
	ModelInfo               *ModelInfo   `protobuf:"bytes,3,opt,name=modelInfo" json:"modelInfo,omitempty"`
	Plans                   []*PlansMap  `protobuf:"bytes,4,rep,name=plans" json:"plans,omitempty"`
	ApplicationSpecificInfo []*StringMap `protobuf:"bytes,5,rep,name=applicationSpecificInfo" json:"applicationSpecificInfo,omitempty"`
}

func (m *MetaNetDef) Reset()                    { *m = MetaNetDef{} }
func (m *MetaNetDef) String() string            { return proto.CompactTextString(m) }
func (*MetaNetDef) ProtoMessage()               {}
func (*MetaNetDef) Descriptor() ([]byte, []int) { return fileDescriptorMetanet, []int{5} }

func (m *MetaNetDef) GetBlobs() []*BlobsMap {
	if m != nil {
		return m.Blobs
	}
	return nil
}

func (m *MetaNetDef) GetNets() []*NetsMap {
	if m != nil {
		return m.Nets
	}
	return nil
}

func (m *MetaNetDef) GetModelInfo() *ModelInfo {
	if m != nil {
		return m.ModelInfo
	}
	return nil
}

func (m *MetaNetDef) GetPlans() []*PlansMap {
	if m != nil {
		return m.Plans
	}
	return nil
}

func (m *MetaNetDef) GetApplicationSpecificInfo() []*StringMap {
	if m != nil {
		return m.ApplicationSpecificInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*ModelInfo)(nil), "caffe2.ModelInfo")
	proto.RegisterType((*BlobsMap)(nil), "caffe2.BlobsMap")
	proto.RegisterType((*NetsMap)(nil), "caffe2.NetsMap")
	proto.RegisterType((*PlansMap)(nil), "caffe2.PlansMap")
	proto.RegisterType((*StringMap)(nil), "caffe2.StringMap")
	proto.RegisterType((*MetaNetDef)(nil), "caffe2.MetaNetDef")
}
func (m *ModelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetanet(dAtA, i, uint64(len(m.Project)))
	i += copy(dAtA[i:], m.Project)
	dAtA[i] = 0x12
	i++
	i = encodeVarintMetanet(dAtA, i, uint64(len(m.ModelClass)))
	i += copy(dAtA[i:], m.ModelClass)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMetanet(dAtA, i, uint64(len(m.Version)))
	i += copy(dAtA[i:], m.Version)
	if m.PredictorType != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMetanet(dAtA, i, uint64(len(*m.PredictorType)))
		i += copy(dAtA[i:], *m.PredictorType)
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintMetanet(dAtA, i, uint64(len(m.ModelId)))
	i += copy(dAtA[i:], m.ModelId)
	return i, nil
}

func (m *BlobsMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobsMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetanet(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	if len(m.Value) > 0 {
		for _, s := range m.Value {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *NetsMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetsMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetanet(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	if m.Value == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("value")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetanet(dAtA, i, uint64(m.Value.Size()))
		n1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *PlansMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlansMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetanet(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	if m.Value == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("value")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetanet(dAtA, i, uint64(m.Value.Size()))
		n2, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *StringMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetanet(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x12
	i++
	i = encodeVarintMetanet(dAtA, i, uint64(len(m.Value)))
	i += copy(dAtA[i:], m.Value)
	return i, nil
}

func (m *MetaNetDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaNetDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Blobs) > 0 {
		for _, msg := range m.Blobs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMetanet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Nets) > 0 {
		for _, msg := range m.Nets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMetanet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ModelInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMetanet(dAtA, i, uint64(m.ModelInfo.Size()))
		n3, err := m.ModelInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Plans) > 0 {
		for _, msg := range m.Plans {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMetanet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ApplicationSpecificInfo) > 0 {
		for _, msg := range m.ApplicationSpecificInfo {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMetanet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Metanet(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Metanet(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMetanet(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ModelInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Project)
	n += 1 + l + sovMetanet(uint64(l))
	l = len(m.ModelClass)
	n += 1 + l + sovMetanet(uint64(l))
	l = len(m.Version)
	n += 1 + l + sovMetanet(uint64(l))
	if m.PredictorType != nil {
		l = len(*m.PredictorType)
		n += 1 + l + sovMetanet(uint64(l))
	}
	l = len(m.ModelId)
	n += 1 + l + sovMetanet(uint64(l))
	return n
}

func (m *BlobsMap) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovMetanet(uint64(l))
	if len(m.Value) > 0 {
		for _, s := range m.Value {
			l = len(s)
			n += 1 + l + sovMetanet(uint64(l))
		}
	}
	return n
}

func (m *NetsMap) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovMetanet(uint64(l))
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovMetanet(uint64(l))
	}
	return n
}

func (m *PlansMap) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovMetanet(uint64(l))
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovMetanet(uint64(l))
	}
	return n
}

func (m *StringMap) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovMetanet(uint64(l))
	l = len(m.Value)
	n += 1 + l + sovMetanet(uint64(l))
	return n
}

func (m *MetaNetDef) Size() (n int) {
	var l int
	_ = l
	if len(m.Blobs) > 0 {
		for _, e := range m.Blobs {
			l = e.Size()
			n += 1 + l + sovMetanet(uint64(l))
		}
	}
	if len(m.Nets) > 0 {
		for _, e := range m.Nets {
			l = e.Size()
			n += 1 + l + sovMetanet(uint64(l))
		}
	}
	if m.ModelInfo != nil {
		l = m.ModelInfo.Size()
		n += 1 + l + sovMetanet(uint64(l))
	}
	if len(m.Plans) > 0 {
		for _, e := range m.Plans {
			l = e.Size()
			n += 1 + l + sovMetanet(uint64(l))
		}
	}
	if len(m.ApplicationSpecificInfo) > 0 {
		for _, e := range m.ApplicationSpecificInfo {
			l = e.Size()
			n += 1 + l + sovMetanet(uint64(l))
		}
	}
	return n
}

func sovMetanet(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetanet(x uint64) (n int) {
	return sovMetanet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ModelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Project = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelClass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredictorType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PredictorType = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlobsMap) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlobsMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlobsMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("key")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetsMap) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetsMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetsMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &NetDef{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMetanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("key")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("value")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlansMap) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlansMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlansMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &PlanDef{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMetanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("key")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("value")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringMap) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMetanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("key")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("value")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaNetDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetanet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaNetDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaNetDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blobs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blobs = append(m.Blobs, &BlobsMap{})
			if err := m.Blobs[len(m.Blobs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nets = append(m.Nets, &NetsMap{})
			if err := m.Nets[len(m.Nets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModelInfo == nil {
				m.ModelInfo = &ModelInfo{}
			}
			if err := m.ModelInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plans = append(m.Plans, &PlansMap{})
			if err := m.Plans[len(m.Plans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationSpecificInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetanet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationSpecificInfo = append(m.ApplicationSpecificInfo, &StringMap{})
			if err := m.ApplicationSpecificInfo[len(m.ApplicationSpecificInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetanet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetanet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetanet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetanet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetanet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetanet
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetanet
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetanet(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetanet = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetanet   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("metanet.proto", fileDescriptorMetanet) }

var fileDescriptorMetanet = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x86, 0xe7, 0x36, 0x61, 0xcb, 0x57, 0x06, 0xc5, 0x42, 0x60, 0xed, 0x10, 0xa2, 0x32, 0x50,
	0x4e, 0x43, 0xca, 0x01, 0x21, 0x2e, 0x48, 0xdd, 0xa6, 0x29, 0x82, 0x96, 0xc9, 0xdd, 0x1d, 0x79,
	0xe9, 0x17, 0x14, 0x48, 0x63, 0x2b, 0x31, 0x93, 0xf6, 0x2f, 0xf8, 0x59, 0xe3, 0xc6, 0x2f, 0x40,
	0xa8, 0xfc, 0x10, 0x90, 0x93, 0x38, 0x4d, 0x0f, 0xf4, 0x14, 0xe5, 0xfd, 0xde, 0xef, 0x79, 0xad,
	0xd7, 0x86, 0xc3, 0x15, 0x6a, 0x51, 0xa0, 0x3e, 0x51, 0xa5, 0xd4, 0x92, 0xde, 0x4b, 0x44, 0x9a,
	0x62, 0x74, 0x74, 0xbf, 0xf9, 0x36, 0xea, 0xe4, 0x07, 0x01, 0x6f, 0x26, 0x97, 0x98, 0xc7, 0x45,
	0x2a, 0xa9, 0x0f, 0xfb, 0xaa, 0x94, 0x5f, 0x30, 0xd1, 0x8c, 0x04, 0x24, 0xf4, 0xa6, 0xce, 0xdd,
	0xaf, 0x67, 0x7b, 0xdc, 0x8a, 0xf4, 0x18, 0x60, 0x65, 0xcc, 0xa7, 0xb9, 0xa8, 0x2a, 0x36, 0xe8,
	0x59, 0x7a, 0xba, 0xa1, 0xdc, 0x60, 0x59, 0x65, 0xb2, 0x60, 0xc3, 0x3e, 0xa5, 0x15, 0xe9, 0x6b,
	0x38, 0x54, 0x25, 0x2e, 0xb3, 0x44, 0xcb, 0xf2, 0xea, 0x56, 0x21, 0x73, 0x8c, 0xeb, 0xed, 0x78,
	0x11, 0xcf, 0x2f, 0x3e, 0x9c, 0x7f, 0xba, 0xe4, 0xe7, 0x67, 0xf1, 0xe9, 0xd5, 0x47, 0xce, 0xb7,
	0x6d, 0x86, 0x5b, 0xa7, 0xc4, 0x4b, 0xe6, 0xf6, 0xb9, 0xad, 0x38, 0x79, 0x03, 0x07, 0xd3, 0x5c,
	0x5e, 0x57, 0x33, 0xa1, 0xe8, 0x13, 0x18, 0x7e, 0xc5, 0x5b, 0x46, 0x82, 0x41, 0xe7, 0x33, 0x02,
	0x7d, 0x0c, 0xee, 0x8d, 0xc8, 0xbf, 0x21, 0x1b, 0x04, 0xc3, 0xd0, 0xe3, 0xcd, 0xcf, 0xe4, 0x02,
	0xf6, 0xe7, 0xa8, 0x77, 0x2e, 0x1e, 0x6f, 0x16, 0x07, 0xe1, 0x28, 0x7a, 0x70, 0xd2, 0xd6, 0x38,
	0x47, 0x7d, 0x86, 0xa9, 0x05, 0xc5, 0x70, 0x70, 0x99, 0x8b, 0x62, 0x27, 0xe9, 0xc5, 0x36, 0xe9,
	0xa1, 0x25, 0x99, 0xc5, 0x1e, 0xea, 0x1d, 0x78, 0x0b, 0x5d, 0x66, 0xc5, 0xe7, 0x5d, 0xac, 0xa3,
	0x3e, 0xcb, 0x4e, 0x5a, 0xc0, 0x5f, 0x02, 0x30, 0x43, 0x2d, 0x9a, 0x13, 0xd2, 0x97, 0xe0, 0x5e,
	0x9b, 0x76, 0x18, 0x09, 0x86, 0xe1, 0x28, 0x1a, 0xdb, 0x58, 0x5b, 0x19, 0x6f, 0xc6, 0xf4, 0x39,
	0x38, 0x05, 0xea, 0xaa, 0x2e, 0xa8, 0x77, 0xba, 0xb6, 0x1f, 0x5e, 0x0f, 0xe9, 0x2b, 0xf0, 0x56,
	0xf6, 0xd5, 0xd4, 0x97, 0x3c, 0x8a, 0x1e, 0x59, 0x67, 0xf7, 0x9c, 0xf8, 0xc6, 0x63, 0xd2, 0x95,
	0x29, 0x86, 0x39, 0xdb, 0xe9, 0xb6, 0x2d, 0xde, 0x8c, 0xe9, 0x7b, 0x78, 0x2a, 0x94, 0xca, 0xb3,
	0x44, 0xe8, 0x4c, 0x16, 0x0b, 0x85, 0x49, 0x96, 0x66, 0x49, 0x1d, 0xe3, 0xd6, 0x9b, 0x5d, 0x4c,
	0x57, 0x0e, 0xff, 0xdf, 0xc6, 0x74, 0x7c, 0xb7, 0xf6, 0xc9, 0xcf, 0xb5, 0x4f, 0x7e, 0xaf, 0x7d,
	0xf2, 0xfd, 0x8f, 0xbf, 0xf7, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xf3, 0x69, 0xa0, 0x14, 0x03,
	0x00, 0x00,
}
